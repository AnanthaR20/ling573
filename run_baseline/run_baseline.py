"""
Script for generating summaries of input data. Intended as a basic script to generate summaries we can
do evaluation on.

This script:
- Reads input data
- Loads the 'google/pegasus-billsum' model from huggingface
- Generates summaries of the input.

It expects one argument, "--input_data", which should be a single-column csv
of plaintexts. For example, files generated by "sample.py" are expected to be passed to this script
"""
import argparse
import pandas as pd
from transformers import PegasusForConditionalGeneration, PegasusTokenizer
import torch
from datasets import load_dataset


def main():
    parser = argparse.ArgumentParser()
    # parser.add_argument("--input_data",help="File generated by 'sample.py' containing texts to generate a summary for")
    # args = parser.parse_args()

    # Create an Iterable called 'docs'
    # data = args.input_data #  ---> A file generated by 'sample.py'
    # docs = pd.read_csv(data,header=None)[0] # ---> Iterable with text data
    docs = load_dataset("FiscalNote/billsum")
    test = docs['test'].to_pandas()['text']

    # Initialize Model
    model_name = "google/pegasus-billsum"
    device = "cuda" if torch.cuda.is_available() else "cpu"
    tokenizer = PegasusTokenizer.from_pretrained(model_name)
    model = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)

    # Generate summaries for each doc in docs
    for i,doc in docs.iterrows():
        batch = tokenizer(doc, truncation=True, padding="longest", return_tensors="pt").to(device)
        translated = model.generate(**batch)
        tgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)
        print(tgt_text)    


if __name__ == "__main__":
    main()